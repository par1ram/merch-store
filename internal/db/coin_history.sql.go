// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: coin_history.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getReceivedTransfers = `-- name: GetReceivedTransfers :many
SELECT 
  ct.amount,
  e.username AS from_user
FROM coin_transactions ct
JOIN employees e ON ct.from_employee_id = e.id
WHERE ct.transaction_type = 'transfer'
  AND ct.to_employee_id = $1
ORDER BY ct.created_at DESC
`

type GetReceivedTransfersRow struct {
	Amount   int32
	FromUser string
}

// GetReceivedTransfers возвращает историю переводов (монеты, полученные сотрудником).
// Для каждого перевода возвращается сумма и имя отправителя.
func (q *Queries) GetReceivedTransfers(ctx context.Context, toEmployeeID pgtype.Int4) ([]GetReceivedTransfersRow, error) {
	rows, err := q.db.Query(ctx, getReceivedTransfers, toEmployeeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetReceivedTransfersRow
	for rows.Next() {
		var i GetReceivedTransfersRow
		if err := rows.Scan(&i.Amount, &i.FromUser); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSentTransfers = `-- name: GetSentTransfers :many
SELECT 
  ct.amount,
  e.username AS to_user
FROM coin_transactions ct
JOIN employees e ON ct.to_employee_id = e.id
WHERE ct.transaction_type = 'transfer'
  AND ct.from_employee_id = $1
ORDER BY ct.created_at DESC
`

type GetSentTransfersRow struct {
	Amount int32
	ToUser string
}

// ----------------------------------------------------------
// GetSentTransfers возвращает историю исходящих переводов (монеты, отправленные сотрудником).
// Для каждого перевода возвращается сумма и имя получателя.
func (q *Queries) GetSentTransfers(ctx context.Context, fromEmployeeID int32) ([]GetSentTransfersRow, error) {
	rows, err := q.db.Query(ctx, getSentTransfers, fromEmployeeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSentTransfersRow
	for rows.Next() {
		var i GetSentTransfersRow
		if err := rows.Scan(&i.Amount, &i.ToUser); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
