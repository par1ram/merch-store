// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type TransactionTypeEnum string

const (
	TransactionTypeEnumTransfer TransactionTypeEnum = "transfer"
	TransactionTypeEnumPurchase TransactionTypeEnum = "purchase"
)

func (e *TransactionTypeEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TransactionTypeEnum(s)
	case string:
		*e = TransactionTypeEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for TransactionTypeEnum: %T", src)
	}
	return nil
}

type NullTransactionTypeEnum struct {
	TransactionTypeEnum TransactionTypeEnum
	Valid               bool // Valid is true if TransactionTypeEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTransactionTypeEnum) Scan(value interface{}) error {
	if value == nil {
		ns.TransactionTypeEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TransactionTypeEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTransactionTypeEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TransactionTypeEnum), nil
}

type CoinTransaction struct {
	ID              int32
	TransactionType TransactionTypeEnum
	FromEmployeeID  int32
	ToEmployeeID    pgtype.Int4
	MerchID         pgtype.Int4
	Amount          int32
	CreatedAt       pgtype.Timestamptz
}

type Employee struct {
	ID           int32
	Username     string
	PasswordHash string
	Coins        int32
	CreatedAt    pgtype.Timestamptz
}

type Inventory struct {
	ID         int32
	EmployeeID int32
	MerchID    int32
	Quantity   int32
}

type Merch struct {
	ID    int32
	Name  string
	Price int32
}
